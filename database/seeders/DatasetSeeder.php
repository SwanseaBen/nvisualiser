<?php

namespace Database\Seeders;

use App\Models\Dataset;
use Illuminate\Database\QueryException;
use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Process;
use Illuminate\Support\Facades\Schema;

class DatasetSeeder extends Seeder
{
  /**
   * Reads the datasets from the CSV generated by nhanes_utils and populates the database
   */
  public function run(): void
  {
    $lines = array_map('str_getcsv', file(storage_path('app/nhanes_datasets.csv')));
    $datasets = array_slice($lines, 1); // Exclude headers

    foreach ($datasets as $dataset) {
      $model = new Dataset([
        'start_year' => explode('-', $dataset[0])[0],
        'end_year' => explode('-', $dataset[0])[1],
        'component' => $dataset[1],
        'description' => $dataset[2],
        'docs_url' => $dataset[3],
        'data_url' => $dataset[4],
      ]);

      // If a dataset with data_url already exists continue, otherwise save the model
      if (Dataset::query()->where('data_url', $model->data_url)->exists()) {
        continue;
      }
      $model->save();

      // Check if the SQL table already exists
      $table_name = substr($model->data_url, strrpos($model->data_url, '/') + 1);
      $table_name = substr($table_name, 0, strrpos($table_name, '.'));
      if (Schema::hasTable($table_name)) {
        continue;
      }

      // Extract the file name from the data_url
      $file_name = substr($model->data_url, strrpos($model->data_url, '/') + 1);
      $file_name = substr($file_name, 0, strrpos($file_name, '.')) . '.csv';
      $path = storage_path('app/datasets/' . $file_name);

      // Stop condition for the file not being present
      if (!is_file($path)) {
        continue;
      }

      // Extract the data from the CSV
      $data = array_map('str_getcsv', file($path));
      $headers = array_shift($data);

      // Construct an associative array for each row mapping headers to values
      $rows = [];
      foreach ($data as $row) {
        $row = array_combine($headers, $row);
        foreach ($row as $key => $value) {
          if (empty($value)) {
            $row[$key] = null;
          }
        }
        $rows[] = $row;
      }

      // Create a new database using $table_name, with columns defined by $headers
      Schema::create($table_name, function ($table) use ($headers) {
        $seqn = array_shift($headers);
        $table->string($seqn, 50)->primary();

        foreach ($headers as $header) {
          $table->string($header, 50)->nullable();
        }
      });

      // Chunk the rows and populate the database using batched insert queries
      $chunks = array_chunk($rows, 1000);
      foreach ($chunks as $chunk) {
        try {
          DB::table($table_name)->insert($chunk);
        } catch (QueryException $e) {
          echo "Failed to insert rows for $table_name\n";
        }
      }
    }
  }
}
